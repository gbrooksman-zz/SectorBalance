@page "/etflist"
@inject AppStateContainer state
@inject HttpClient httpClient
@using SectorBalanceClient
@using SectorBalanceShared

    <div>
        <div class="row">
            <DataGrid Items="@pricedEquityList" TItem="ModelEquity">
                <HeaderTemplate>
                    <th>Symbol</th>
                    <th>Name</th>
                    <th>Last Price</th>
                </HeaderTemplate>
                <RowTemplate>
                    <td>@context.Equity.Symbol</td>
                    <td>@context.Equity.SymbolName</td>
                    <td>@context.LastPrice</td>
                </RowTemplate>
                <FooterTemplate>
                    <td>
                        @context.Count equities found.
                    </td>
                    <td>
                        Prices as of: @state.LastQuoteDate.ToShortDateString()
                    </td>   
                </FooterTemplate>
            </DataGrid>
        </div>
        <div class="row">
            
        </div>
    </div>


@code
{


private List<ModelEquity> pricedEquityList = new List<ModelEquity>();


protected override async Task OnInitAsync()
{
    await ListEquities();
}

private async Task ListEquities()
{
    var response = await httpClient.GetJsonAsync<List<ModelEquity>>($"{state.APIUrl}/api/quote/getcorebydate?coreGuid={state.CoreModelId}&date={DateTime.Now}");

    pricedEquityList = response.ToList();

    state.ModelEquityList = pricedEquityList;

}

private async Task<PricedEquity> GetLastQuote(Guid equityid)
{
    var response = await httpClient.GetJsonAsync<Quote>($"{state.APIUrl}/api/quote/getlast?equityid={equityid}");
    PricedEquity pe = new PricedEquity();
    pe.LastPrice = response.Price;
    pe.LastPriceDate = response.Date;
    return pe;
}

internal class PricedEquity : Equity
{
    internal decimal LastPrice { get; set; }
    internal DateTime LastPriceDate { get; set; }
}


}