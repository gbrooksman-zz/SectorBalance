@page "/equitiestracked"
@inject AppStateContainer state
@inject HttpClient httpClient
@using SectorBalanceShared

    <HeadingComponent HeadingText ="Hello Geoff" />

@*<br />
<div class="container-fluid">
    <div class="card-deck">
        @foreach (var pricedequity in pricedEquityList)
        {
            <div class="card">
                <div class="card-header"> @pricedequity.Symbol</div>
                <div class="card-body">
                    @pricedequity.SymbolName
                    <p>Last price: @pricedequity.LastPrice</p>
                    <p>Last price date: @pricedequity.LastPriceDate.ToShortDateString()</p>
                </div>
            </div>
        }
    </div>
</div>*@


@functions
{
    // private List<PricedEquity> pricedEquityList = new List<PricedEquity>();
    //// private decimal lastPrice = default;

    // protected override async Task OnInitAsync()
    // {
    //     await ListEquities();
    // }

    // private async Task ListEquities()
    // {
    //     var response = await httpClient.GetJsonAsync<List<Equity>>($"{state.APIUrl}/api/equity/getlist");
    //     List<Equity> tempequityList = response.ToList();

    //     state.EquityList = tempequityList;

    //     foreach (var equity in tempequityList)
    //     {
    //         PricedEquity pricedEquity = new PricedEquity();
    //         pricedEquity.Id = equity.Id;
    //         pricedEquity.Symbol = equity.Symbol;
    //         pricedEquity.SymbolName = equity.SymbolName;

    //         PricedEquity pe = await GetLastQuote(equity.Id);

    //         pricedEquity.LastPrice = pe.LastPrice;
    //         pricedEquity.LastPriceDate = pe.LastPriceDate;
    //         pricedEquityList.Add(pricedEquity);
    //     }
    // }

    // private async Task<PricedEquity> GetLastQuote(Guid equityid)
    // {
    //     var response = await httpClient.GetJsonAsync<Quote>($"{state.APIUrl}/api/quote/getlast?equityid={equityid}");
    //     PricedEquity pe = new PricedEquity();
    //     pe.LastPrice = response.Price;
    //     pe.LastPriceDate = response.Date;
    //     return pe;
    // }

    // internal class PricedEquity : Equity
    // {
    //     internal decimal LastPrice { get; set; }
    //     internal DateTime LastPriceDate { get; set; }
    // }
}
