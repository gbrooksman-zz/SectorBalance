@using SectorBalanceClient
@using SectorBalanceShared
@using Microsoft.AspNetCore.Components

    <style type="text/css">
        .small {
            font: 12px sans-serif;
        }

        .normal {
            font: 16px sans-serif;
        }

    </style>
     
    <figure>
        <svg width="@Width" height="@Height" viewBox="0 0 500 500">
            <rect width="@Width" height="@Height" fill="white" stroke="gray" />

            <title>Equity Chart Title</title>
            <desc>Equity Chart Description</desc>

            <!--Axis-->
            <path d="M 0 0 L 0 500 M 0 0 L 500 0"
                    fill="red" stroke="gray" stroke-width="0.3" />

            <!--Horizontal Lines-->

            @DrawGridLines()

            <!-- <path d="M 25 300 L 500 300"
                    fill="none" stroke="black" stroke-width="0.3" />
            <path d="M 25 250 L 500 250"
                    fill="none" stroke="black" stroke-width="0.3" />
            <path d="M 25 200 L 500 200"
                    fill="none" stroke="black" stroke-width="0.3" />
            <path d="M 25 150 L 500 150"
                    fill="none" stroke="black" stroke-width="0.3" />
            <path d="M 25 100 L 500 100"
                    fill="none" stroke="black" stroke-width="0.3" />
            <path d="M 25 50 L 500 50"
                    fill="none" stroke="black" stroke-width="0.3" /> -->

            <!--Vertical Lines-->
            <path d="M 100 0 L 100 350"
                    fill="none" stroke="black" stroke-width="0.3" />
            <path d="M 200 0 L 200 350"
                    fill="none" stroke="black" stroke-width="0.3" />
            <path d="M 300 0 L 300 350"
                    fill="none" stroke="black" stroke-width="0.3" />
            <path d="M 400 0 L 400 350"
                    fill="none" stroke="black" stroke-width="0.3" />


            <!--Labels-->

            <text class="small" x="30" y="375" fill="Black">Jan</text>
            <text class="small" x="130" y="375" fill="Black">Feb</text>
            <text class="small" x="230" y="375" fill="Black">Mar</text>
            <text class="small" x="330" y="375" fill="Black">Apr</text>
            <text class="small" x="430" y="375" fill="Black">May</text>

            <text class="small" x="0" y="300" fill="Black">10</text>
            <text class="small" x="0" y="250" fill="Black">20</text>
            <text class="small" x="0" y="200" fill="Black">30</text>
            <text class="small" x="0" y="150" fill="Black">40</text>
            <text class="small" x="0" y="100" fill="Black">50</text>
            <text class="small" x="0" y="50" fill="Black">60</text>

            @DrawDataElements()

        </svg>
    </figure>  

@code
{
    [Parameter]
    public string Width {get; set;} = "auto";

    [Parameter]
    public string Height {get; set;} = "auto";

    [Parameter]
    public int HorizontalGridLineCount {get; set;} = 20;

    [Parameter]
    public int VerticalGridLineCount {get; set;} = 20;

    RenderFragment BuidHorizontalGridLines() => builder =>
    {
        double lineGap = 500 / HorizontalGridLineCount;
        int lineNumber = 1;
        double aggregateHeight = 0d;

        for(int i = 1; i <= HorizontalGridLineCount; i++)
        {
            string linePath = $"M {lineGap} {aggregateHeight} L 500 {aggregateHeight}";

            builder.OpenElement(1,"path");
            builder.AddAttribute(2, "d", linePath);
            builder.AddAttribute(3, "fill", "none");
            builder.AddAttribute(4, "stroke","black");
            builder.AddAttribute(5, "stroke-width", 0.5);
            builder.CloseElement();
            lineNumber++;
            aggregateHeight += lineGap; 
        }
    };

    private RenderFragment DrawGridLines()
    {
        RenderFragment frag = null;

        frag = BuidHorizontalGridLines();

        return frag;
    }

    RenderFragment BuildLines(string linePath, int colorValue) => builder =>
    {
        builder.OpenElement(1,"path");
        builder.AddAttribute(2, "d", linePath);
        builder.AddAttribute(3, "fill", "none");
        builder.AddAttribute(4, "stroke",GetLineColor(colorValue));
        builder.AddAttribute(5, "stroke-width", 2);
        builder.CloseElement();
    };

    RenderFragment BuildLegendPath(string legendPath, string legendText, int colorValue, int xCoord, int yCoord) => builder =>
    {
        builder.OpenElement(1,"path");
        builder.AddAttribute(2, "d", legendPath);
        builder.AddAttribute(3, "fill", "none");
        builder.AddAttribute(4, "stroke",GetLineColor(colorValue));
        builder.AddAttribute(5, "stroke-width", 2);
        builder.CloseElement();
    };

    RenderFragment BuildLegendText(string legendText, int xCoord, int yCoord) => builder =>
    {
        builder.OpenElement(1,"text");
        builder.AddAttribute(2, "class", "small");
        builder.AddAttribute(3, "x", xCoord);
        builder.AddAttribute(4, "y", yCoord);
        builder.AddContent(5, legendText);
        builder.CloseElement();
    };

    private RenderFragment DrawDataElements()
    {
        RenderFragment frag = null;
        int colorValue = 1;
        int xCoord = 0;
        int yCoord = 0;
        string linePath = string.Empty;
        string legendPath = string.Empty;
        string legendText = string.Empty;

        foreach(string equity in EquityList.Split(",".ToCharArray()))
        {
            switch (equity)
            {
                case "xlf":
                    linePath = "M 30 250 L 130 120 L 230 150 L 330 80 L 480 200";
                    legendPath = "M 40 10 L 80 10";
                    legendText = equity;
                    xCoord = 20;
                    yCoord = 10;
                    break;
                case "xle":
                    linePath = "M 30 230 L 130 170 L 230 120 L 330 100 L 480 130";
                    legendPath = "M 40 30 L 80 30";
                    legendText = equity;
                    xCoord = 20;
                    yCoord = 30;
                    break;
                case "xlk":
                    linePath = "M 30 210 L 130 150 L 230 100 L 330 120 L 480 160";
                    legendPath = "M 40 50 L 80 50";
                    legendText = equity;
                    xCoord = 20;
                    yCoord = 50;
                    break;
            }

            frag += BuildLines(linePath, colorValue);
            frag += BuildLegendPath(legendPath, legendText,colorValue, xCoord, yCoord);
            frag += BuildLegendText(legendText, xCoord, yCoord);

            colorValue++;
        }

        return frag;
    }

    private string GetLineColor(int value)
    {
        string ret = string.Empty;

        switch (value)
        {
            case 1:
                ret = "blue";
                break;
            case 2:
                ret = "red";
                break;
            case 3:
                ret = "green";
                break;
        }

        return ret;
    }

    [Parameter]
    public string EquityList { get; set; }

}